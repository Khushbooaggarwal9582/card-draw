/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"CardDrawer","structs":{},"methods":[{"name":"setCard","args":[{"type":"string","name":"cardInfo"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCard","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"clearCard","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"currentCard":{"keyType":"AVMString","valueType":"AVMString","key":"Y3VycmVudENhcmQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[71,83,107],"errorMessage":"OnCompletion is not NoOp"},{"pc":[142],"errorMessage":"can only call when creating"},{"pc":[74,86,110],"errorMessage":"can only call when not creating"},{"pc":[158],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrICJjdXJyZW50Q2FyZCIgIiIgMHgxNTFmN2M3NQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gY3VycmVudENhcmQgPSBHbG9iYWxTdGF0ZTxzdHJpbmc+KHsga2V5OiAnY3VycmVudENhcmQnLCBpbml0aWFsVmFsdWU6ICcnIH0pOwogICAgYnl0ZWNfMCAvLyAiY3VycmVudENhcmQiCiAgICBieXRlY18xIC8vICIiCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgQ2FyZERyYXdlciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMAogICAgcHVzaGJ5dGVzcyAweDBjNzY5ODI3IDB4MDdkYWNkZWIgMHg5OTdmYmQ5NiAvLyBtZXRob2QgInNldENhcmQoc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZ2V0Q2FyZCgpc3RyaW5nIiwgbWV0aG9kICJjbGVhckNhcmQoKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3NldENhcmRfcm91dGVANSBtYWluX2dldENhcmRfcm91dGVANiBtYWluX2NsZWFyQ2FyZF9yb3V0ZUA3CgptYWluX2FmdGVyX2lmX2Vsc2VAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgQ2FyZERyYXdlciBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fY2xlYXJDYXJkX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gY2xlYXJDYXJkKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGNsZWFyQ2FyZAogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRDYXJkX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxNwogICAgLy8gZ2V0Q2FyZCgpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldENhcmQKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3NldENhcmRfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjExCiAgICAvLyBzZXRDYXJkKGNhcmRJbmZvOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgQ2FyZERyYXdlciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMQogICAgLy8gc2V0Q2FyZChjYXJkSW5mbzogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgc2V0Q2FyZAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIENhcmREcmF3ZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE0CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjpDYXJkRHJhd2VyLnNldENhcmQoY2FyZEluZm86IGJ5dGVzKSAtPiBieXRlczoKc2V0Q2FyZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjExCiAgICAvLyBzZXRDYXJkKGNhcmRJbmZvOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBjdXJyZW50Q2FyZCA9IEdsb2JhbFN0YXRlPHN0cmluZz4oeyBrZXk6ICdjdXJyZW50Q2FyZCcsIGluaXRpYWxWYWx1ZTogJycgfSk7CiAgICBieXRlY18wIC8vICJjdXJyZW50Q2FyZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjEyCiAgICAvLyB0aGlzLmN1cnJlbnRDYXJkLnZhbHVlID0gY2FyZEluZm87CiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8gcmV0dXJuIGNhcmRJbmZvOwogICAgZnJhbWVfZGlnIC0xCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo6Q2FyZERyYXdlci5nZXRDYXJkKCkgLT4gYnl0ZXM6CmdldENhcmQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBjdXJyZW50Q2FyZCA9IEdsb2JhbFN0YXRlPHN0cmluZz4oeyBrZXk6ICdjdXJyZW50Q2FyZCcsIGluaXRpYWxWYWx1ZTogJycgfSk7CiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAiY3VycmVudENhcmQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIHJldHVybiB0aGlzLmN1cnJlbnRDYXJkLnZhbHVlOwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OkNhcmREcmF3ZXIuY2xlYXJDYXJkKCkgLT4gdm9pZDoKY2xlYXJDYXJkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gY3VycmVudENhcmQgPSBHbG9iYWxTdGF0ZTxzdHJpbmc+KHsga2V5OiAnY3VycmVudENhcmQnLCBpbml0aWFsVmFsdWU6ICcnIH0pOwogICAgYnl0ZWNfMCAvLyAiY3VycmVudENhcmQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoyMwogICAgLy8gdGhpcy5jdXJyZW50Q2FyZC52YWx1ZSA9ICcnOwogICAgYnl0ZWNfMSAvLyAiIgogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAwtjdXJyZW50Q2FyZAAEFR98dTEYQAADKClnMRtBAGCCAwQMdpgnBAfazesEmX+9ljYaAI4DACYADgACI0MxGRREMRhEiABSIkMxGRREMRhEiABBSRUWVwYCTFAqTFCwIkMxGRREMRhENhoBVwIAiAAZSRUWVwYCTFAqTFCwIkMxGUD/tzEYFEQiQ4oBASiL/2eL/4kjKGVEiSgpZ4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CardDrawer contract
 */
export type CardDrawerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'setCard(string)string': {
      cardInfo: string
    }
    'getCard()string': Record<string, never>
    'clearCard()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'setCard(string)string': [cardInfo: string]
    'getCard()string': []
    'clearCard()void': []
  }
}

/**
 * The return type for each method
 */
export type CardDrawerReturns = {
  'setCard(string)string': string
  'getCard()string': string
  'clearCard()void': void
}

/**
 * Defines the types of available calls and state of the CardDrawer smart contract.
 */
export type CardDrawerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setCard(string)string' | 'setCard', {
      argsObj: CardDrawerArgs['obj']['setCard(string)string']
      argsTuple: CardDrawerArgs['tuple']['setCard(string)string']
      returns: CardDrawerReturns['setCard(string)string']
    }>
    & Record<'getCard()string' | 'getCard', {
      argsObj: CardDrawerArgs['obj']['getCard()string']
      argsTuple: CardDrawerArgs['tuple']['getCard()string']
      returns: CardDrawerReturns['getCard()string']
    }>
    & Record<'clearCard()void' | 'clearCard', {
      argsObj: CardDrawerArgs['obj']['clearCard()void']
      argsTuple: CardDrawerArgs['tuple']['clearCard()void']
      returns: CardDrawerReturns['clearCard()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        currentCard: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CardDrawerSignatures = keyof CardDrawerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CardDrawerNonVoidMethodSignatures = keyof CardDrawerTypes['methods'] extends infer T ? T extends keyof CardDrawerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CardDrawer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CardDrawerSignatures> = CardDrawerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CardDrawer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CardDrawerSignatures> = CardDrawerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CardDrawerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CardDrawerCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CardDrawerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CardDrawerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CardDrawer smart contract
 */
export abstract class CardDrawerParamsFactory {
  /**
   * Constructs a no op call for the setCard(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setCard(params: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setCard(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.cardInfo],
    }
  }
  /**
   * Constructs a no op call for the getCard()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCard(params: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCard()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the clearCard()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static clearCard(params: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'clearCard()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CardDrawer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CardDrawerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CardDrawerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CardDrawerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CardDrawerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CardDrawer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CardDrawerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new CardDrawerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardDrawer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardDrawer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardDrawer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CardDrawerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CardDrawer smart contract
 */
export class CardDrawerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CardDrawerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CardDrawer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CardDrawerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CardDrawerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CardDrawerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CardDrawerClient> {
    return new CardDrawerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CardDrawerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CardDrawerClient> {
    return new CardDrawerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CardDrawer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `setCard(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setCard: (params: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardDrawerParamsFactory.setCard(params))
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `getCard()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCard: (params: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CardDrawerParamsFactory.getCard(params))
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `clearCard()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    clearCard: (params: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CardDrawerParamsFactory.clearCard(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CardDrawer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `setCard(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setCard: (params: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardDrawerParamsFactory.setCard(params))
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `getCard()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCard: (params: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CardDrawerParamsFactory.getCard(params))
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `clearCard()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    clearCard: (params: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CardDrawerParamsFactory.clearCard(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CardDrawer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `setCard(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setCard: async (params: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardDrawerParamsFactory.setCard(params))
      return {...result, return: result.return as unknown as (undefined | CardDrawerReturns['setCard(string)string'])}
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `getCard()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCard: async (params: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CardDrawerParamsFactory.getCard(params))
      return {...result, return: result.return as unknown as (undefined | CardDrawerReturns['getCard()string'])}
    },

    /**
     * Makes a call to the CardDrawer smart contract using the `clearCard()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    clearCard: async (params: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CardDrawerParamsFactory.clearCard(params))
      return {...result, return: result.return as unknown as (undefined | CardDrawerReturns['clearCard()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CardDrawerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CardDrawer app
   */
  state = {
    /**
     * Methods to access global state for the current CardDrawer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          currentCard: result.currentCard,
        }
      },
      /**
       * Get the current value of the currentCard key in global state
       */
      currentCard: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("currentCard")) as string | undefined },
    },
  }

  public newGroup(): CardDrawerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setCard(string)string method call against the CardDrawer contract
       */
      setCard(params: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setCard(params)))
        resultMappers.push((v) => client.decodeReturnValue('setCard(string)string', v))
        return this
      },
      /**
       * Add a getCard()string method call against the CardDrawer contract
       */
      getCard(params: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCard(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCard()string', v))
        return this
      },
      /**
       * Add a clearCard()void method call against the CardDrawer contract
       */
      clearCard(params: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.clearCard(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the CardDrawer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CardDrawerComposer
  }
}
export type CardDrawerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setCard(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCard(params?: CallParams<CardDrawerArgs['obj']['setCard(string)string'] | CardDrawerArgs['tuple']['setCard(string)string']>): CardDrawerComposer<[...TReturns, CardDrawerReturns['setCard(string)string'] | undefined]>

  /**
   * Calls the getCard()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCard(params?: CallParams<CardDrawerArgs['obj']['getCard()string'] | CardDrawerArgs['tuple']['getCard()string']>): CardDrawerComposer<[...TReturns, CardDrawerReturns['getCard()string'] | undefined]>

  /**
   * Calls the clearCard()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearCard(params?: CallParams<CardDrawerArgs['obj']['clearCard()void'] | CardDrawerArgs['tuple']['clearCard()void']>): CardDrawerComposer<[...TReturns, CardDrawerReturns['clearCard()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CardDrawer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CardDrawerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CardDrawerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CardDrawerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CardDrawerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CardDrawerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CardDrawerComposerResults<TReturns>>
}
export type CardDrawerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

